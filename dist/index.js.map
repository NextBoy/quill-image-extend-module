{"version":3,"sources":["webpack:///index.js","webpack:///webpack/bootstrap a784e7187814612de122","webpack:///./src/index.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","_classCallCheck","instance","Constructor","TypeError","imgHandler","fileInput","document","querySelector","createElement","setAttribute","classList","add","style","display","addEventListener","self","QuillWatch","active","file","files","value","config","size","sizeError","action","uploadImg","toBase64","body","appendChild","click","ImageExtend","container","_createClass","defineProperties","target","props","length","descriptor","writable","key","protoProps","staticProps","watcher","on","imageExtendId","this","emit","activeId","type","arguments","undefined","quill","id","Math","random","imgURL","root","pasteHandle","bind","dropHandle","e","preventDefault","cursorIndex","clipboardData","items","item","types","kind","match","getAsFile","dataTransfer","reader","FileReader","onload","result","insertImg","readAsDataURL","quillLoading","formData","FormData","append","editForm","xhr","XMLHttpRequest","open","headers","change","onreadystatechange","readyState","status","res","JSON","parse","responseText","response","uploadSuccess","success","error","uploadError","upload","onloadstart","uploading","start","onprogress","complete","loaded","total","progress","onerror","onloadend","end","send","insertEmbed","update","setSelection","pro","innerHTML","replace","getSelection","index","getLength","insertText","color","header","list","script","indent","direction","background","font","align"],"mappings":"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","file":"index.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"QuillWatch\", function() { return QuillWatch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ImageExtend\", function() { return ImageExtend; });\n/* harmony export (immutable) */ __webpack_exports__[\"imgHandler\"] = imgHandler;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"container\", function() { return container; });\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n *@description 观察者模式 全局监听富文本编辑器\r\n */\nvar QuillWatch = {\n    watcher: {}, // 登记编辑器信息\n    active: null, // 当前触发的编辑器\n    on: function on(imageExtendId, ImageExtend) {\n        // 登记注册使用了ImageEXtend的编辑器\n        if (!this.watcher[imageExtendId]) {\n            this.watcher[imageExtendId] = ImageExtend;\n        }\n    },\n    emit: function emit(activeId) {\n        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n        // 事件发射触发\n        this.active = this.watcher[activeId];\n        if (type === 1) {\n            imgHandler();\n        }\n    }\n\n    /**\r\n     * @description 图片功能拓展： 增加上传 拖动 复制\r\n     */\n};var ImageExtend = function () {\n    /**\r\n     * @param quill {Quill}富文本实例\r\n     * @param config {Object} options\r\n     * config  keys: action, headers, editForm start end error  size response\r\n     */\n    function ImageExtend(quill) {\n        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        _classCallCheck(this, ImageExtend);\n\n        this.id = Math.random();\n        this.quill = quill;\n        this.quill.id = this.id;\n        this.config = config;\n        this.file = ''; // 要上传的图片\n        this.imgURL = ''; // 图片地址\n        quill.root.addEventListener('paste', this.pasteHandle.bind(this), false);\n        quill.root.addEventListener('drop', this.dropHandle.bind(this), false);\n        quill.root.addEventListener('dropover', function (e) {\n            e.preventDefault();\n        }, false);\n        this.cursorIndex = 0;\n        QuillWatch.on(this.id, this);\n    }\n\n    /**\r\n     * @description 粘贴\r\n     * @param e\r\n     */\n\n\n    _createClass(ImageExtend, [{\n        key: 'pasteHandle',\n        value: function pasteHandle(e) {\n            // e.preventDefault()\n            QuillWatch.emit(this.quill.id, 0);\n            var clipboardData = e.clipboardData;\n            var i = 0;\n            var items = void 0,\n                item = void 0,\n                types = void 0;\n\n            if (clipboardData) {\n                items = clipboardData.items;\n\n                if (!items) {\n                    return;\n                }\n                item = items[0];\n                types = clipboardData.types || [];\n\n                for (; i < types.length; i++) {\n                    if (types[i] === 'Files') {\n                        item = items[i];\n                        break;\n                    }\n                }\n                if (item && item.kind === 'file' && item.type.match(/^image\\//i)) {\n                    this.file = item.getAsFile();\n                    var self = this;\n                    // 如果图片限制大小\n                    if (self.config.size && self.file.size >= self.config.size * 1024 * 1024) {\n                        if (self.config.sizeError) {\n                            self.config.sizeError();\n                        }\n                        return;\n                    }\n                    if (this.config.action) {\n                        // this.uploadImg()\n                    } else {\n                            // this.toBase64()\n                        }\n                }\n            }\n        }\n\n        /**\r\n         * 拖拽\r\n         * @param e\r\n         */\n\n    }, {\n        key: 'dropHandle',\n        value: function dropHandle(e) {\n            QuillWatch.emit(this.quill.id, 0);\n            var self = this;\n            e.preventDefault();\n            // 如果图片限制大小\n            if (self.config.size && self.file.size >= self.config.size * 1024 * 1024) {\n                if (self.config.sizeError) {\n                    self.config.sizeError();\n                }\n                return;\n            }\n            self.file = e.dataTransfer.files[0]; // 获取到第一个上传的文件对象\n            if (this.config.action) {\n                self.uploadImg();\n            } else {\n                self.toBase64();\n            }\n        }\n\n        /**\r\n         * @description 将图片转为base4\r\n         */\n\n    }, {\n        key: 'toBase64',\n        value: function toBase64() {\n            var self = this;\n            var reader = new FileReader();\n            reader.onload = function (e) {\n                // 返回base64\n                self.imgURL = e.target.result;\n                self.insertImg();\n            };\n            reader.readAsDataURL(self.file);\n        }\n\n        /**\r\n         * @description 上传图片到服务器\r\n         */\n\n    }, {\n        key: 'uploadImg',\n        value: function uploadImg() {\n            var self = this;\n            var quillLoading = self.quillLoading;\n            var config = self.config;\n            // 构造表单\n            var formData = new FormData();\n            formData.append(config.name, self.file);\n            // 自定义修改表单\n            if (config.editForm) {\n                config.editForm(formData);\n            }\n            // 创建ajax请求\n            var xhr = new XMLHttpRequest();\n            xhr.open('post', config.action, true);\n            // 如果有设置请求头\n            if (config.headers) {\n                config.headers(xhr);\n            }\n            if (config.change) {\n                config.change(xhr, formData);\n            }\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200) {\n                        //success\n                        var res = JSON.parse(xhr.responseText);\n                        self.imgURL = config.response(res);\n                        QuillWatch.active.uploadSuccess();\n                        self.insertImg();\n                        if (self.config.success) {\n                            self.config.success();\n                        }\n                    } else {\n                        //error\n                        if (self.config.error) {\n                            self.config.error();\n                        }\n                        QuillWatch.active.uploadError();\n                    }\n                }\n            };\n            // 开始上传数据\n            xhr.upload.onloadstart = function (e) {\n                QuillWatch.active.uploading();\n                // let length = (self.quill.getSelection() || {}).index || self.quill.getLength()\n                // self.quill.insertText(length, '[uploading...]', { 'color': 'red'}, true)\n                if (config.start) {\n                    config.start();\n                }\n            };\n            // 上传过程\n            xhr.upload.onprogress = function (e) {\n                var complete = (e.loaded / e.total * 100 | 0) + '%';\n                QuillWatch.active.progress(complete);\n            };\n            // 当发生网络异常的时候会触发，如果上传数据的过程还未结束\n            xhr.upload.onerror = function (e) {\n                QuillWatch.active.uploadError();\n                if (config.error) {\n                    config.error();\n                }\n            };\n            // 上传数据完成（成功或者失败）时会触发\n            xhr.upload.onloadend = function (e) {\n                if (config.end) {\n                    config.end();\n                }\n            };\n            xhr.send(formData);\n        }\n\n        /**\r\n         * @description 往富文本编辑器插入图片\r\n         */\n\n    }, {\n        key: 'insertImg',\n        value: function insertImg() {\n            var self = QuillWatch.active;\n            self.quill.insertEmbed(QuillWatch.active.cursorIndex, 'image', self.imgURL);\n            self.quill.update();\n            self.quill.setSelection(self.cursorIndex + 1);\n        }\n\n        /**\r\n         * @description 显示上传的进度\r\n         */\n\n    }, {\n        key: 'progress',\n        value: function progress(pro) {\n            pro = '[' + 'uploading' + pro + ']';\n            QuillWatch.active.quill.root.innerHTML = QuillWatch.active.quill.root.innerHTML.replace(/\\[uploading.*?\\]/, pro);\n        }\n\n        /**\r\n         * 开始上传\r\n         */\n\n    }, {\n        key: 'uploading',\n        value: function uploading() {\n            var length = (QuillWatch.active.quill.getSelection() || {}).index || QuillWatch.active.quill.getLength();\n            QuillWatch.active.cursorIndex = length;\n            QuillWatch.active.quill.insertText(QuillWatch.active.cursorIndex, '[uploading...]', { 'color': 'red' }, true);\n        }\n\n        /**\r\n         * 上传失败\r\n         */\n\n    }, {\n        key: 'uploadError',\n        value: function uploadError() {\n            QuillWatch.active.quill.root.innerHTML = QuillWatch.active.quill.root.innerHTML.replace(/\\[uploading.*?\\]/, '[upload error]');\n        }\n    }, {\n        key: 'uploadSuccess',\n        value: function uploadSuccess() {\n            QuillWatch.active.quill.root.innerHTML = QuillWatch.active.quill.root.innerHTML.replace(/\\[uploading.*?\\]/, '');\n        }\n    }]);\n\n    return ImageExtend;\n}();\n\n/**\r\n * @description 点击图片上传\r\n */\nfunction imgHandler() {\n    var fileInput = document.querySelector('.quill-image-input');\n    if (fileInput === null) {\n        fileInput = document.createElement('input');\n        fileInput.setAttribute('type', 'file');\n        fileInput.classList.add('quill-image-input');\n        fileInput.style.display = 'none';\n        // 监听选择文件\n        fileInput.addEventListener('change', function () {\n            var self = QuillWatch.active;\n            self.file = fileInput.files[0];\n            fileInput.value = '';\n            // 如果图片限制大小\n            if (self.config.size && self.file.size >= self.config.size * 1024 * 1024) {\n                if (self.config.sizeError) {\n                    self.config.sizeError();\n                }\n                return;\n            }\n            if (self.config.action) {\n                self.uploadImg();\n            } else {\n                self.toBase64();\n            }\n        });\n        document.body.appendChild(fileInput);\n    }\n    fileInput.click();\n}\n\n/**\r\n *@description 全部工具栏\r\n */\nvar container = [['bold', 'italic', 'underline', 'strike'], ['blockquote', 'code-block'], [{ 'header': 1 }, { 'header': 2 }], [{ 'list': 'ordered' }, { 'list': 'bullet' }], [{ 'script': 'sub' }, { 'script': 'super' }], [{ 'indent': '-1' }, { 'indent': '+1' }], [{ 'direction': 'rtl' }], [{ 'size': ['small', false, 'large', 'huge'] }], [{ 'header': [1, 2, 3, 4, 5, 6, false] }], [{ 'color': [] }, { 'background': [] }], [{ 'font': [] }], [{ 'align': [] }], ['clean'], ['link', 'image', 'video']];\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a784e7187814612de122","/**\r\n *@description 观察者模式 全局监听富文本编辑器\r\n */\r\nexport const QuillWatch = {\r\n    watcher: {},  // 登记编辑器信息\r\n    active: null,  // 当前触发的编辑器\r\n    on: function (imageExtendId, ImageExtend) {  // 登记注册使用了ImageEXtend的编辑器\r\n        if (!this.watcher[imageExtendId]) {\r\n            this.watcher[imageExtendId] = ImageExtend\r\n        }\r\n    },\r\n    emit: function (activeId, type = 1) {  // 事件发射触发\r\n        this.active = this.watcher[activeId]\r\n        if (type === 1) {\r\n            imgHandler()\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @description 图片功能拓展： 增加上传 拖动 复制\r\n */\r\nexport class ImageExtend {\r\n    /**\r\n     * @param quill {Quill}富文本实例\r\n     * @param config {Object} options\r\n     * config  keys: action, headers, editForm start end error  size response\r\n     */\r\n    constructor(quill, config = {}) {\r\n        this.id = Math.random()\r\n        this.quill = quill\r\n        this.quill.id = this.id\r\n        this.config = config\r\n        this.file = ''  // 要上传的图片\r\n        this.imgURL = ''  // 图片地址\r\n        quill.root.addEventListener('paste', this.pasteHandle.bind(this), false)\r\n        quill.root.addEventListener('drop', this.dropHandle.bind(this), false)\r\n        quill.root.addEventListener('dropover', function (e) {\r\n            e.preventDefault()\r\n        }, false)\r\n        this.cursorIndex = 0\r\n        QuillWatch.on(this.id, this)\r\n    }\r\n\r\n    /**\r\n     * @description 粘贴\r\n     * @param e\r\n     */\r\n    pasteHandle(e) {\r\n        // e.preventDefault()\r\n        QuillWatch.emit(this.quill.id, 0)\r\n        let clipboardData = e.clipboardData\r\n        let i = 0\r\n        let items, item, types\r\n\r\n        if (clipboardData) {\r\n            items = clipboardData.items;\r\n\r\n            if (!items) {\r\n                return;\r\n            }\r\n            item = items[0];\r\n            types = clipboardData.types || [];\r\n\r\n            for (; i < types.length; i++) {\r\n                if (types[i] === 'Files') {\r\n                    item = items[i];\r\n                    break;\r\n                }\r\n            }\r\n            if (item && item.kind === 'file' && item.type.match(/^image\\//i)) {\r\n                this.file = item.getAsFile()\r\n                let self = this\r\n                // 如果图片限制大小\r\n                if (self.config.size && self.file.size >= self.config.size * 1024 * 1024) {\r\n                    if (self.config.sizeError) {\r\n                        self.config.sizeError()\r\n                    }\r\n                    return\r\n                }\r\n                if (this.config.action) {\r\n                    // this.uploadImg()\r\n                } else {\r\n                    // this.toBase64()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 拖拽\r\n     * @param e\r\n     */\r\n    dropHandle(e) {\r\n        QuillWatch.emit(this.quill.id, 0)\r\n        const self = this\r\n        e.preventDefault()\r\n        // 如果图片限制大小\r\n        if (self.config.size && self.file.size >= self.config.size * 1024 * 1024) {\r\n            if (self.config.sizeError) {\r\n                self.config.sizeError()\r\n            }\r\n            return\r\n        }\r\n        self.file = e.dataTransfer.files[0]; // 获取到第一个上传的文件对象\r\n        if (this.config.action) {\r\n            self.uploadImg()\r\n        } else {\r\n            self.toBase64()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description 将图片转为base4\r\n     */\r\n    toBase64() {\r\n        const self = this\r\n        const reader = new FileReader()\r\n        reader.onload = (e) => {\r\n            // 返回base64\r\n            self.imgURL = e.target.result\r\n            self.insertImg()\r\n        }\r\n        reader.readAsDataURL(self.file)\r\n    }\r\n\r\n    /**\r\n     * @description 上传图片到服务器\r\n     */\r\n    uploadImg() {\r\n        const self = this\r\n        let quillLoading = self.quillLoading\r\n        let config = self.config\r\n        // 构造表单\r\n        let formData = new FormData()\r\n        formData.append(config.name, self.file)\r\n        // 自定义修改表单\r\n        if (config.editForm) {\r\n            config.editForm(formData)\r\n        }\r\n        // 创建ajax请求\r\n        let xhr = new XMLHttpRequest()\r\n        xhr.open('post', config.action, true)\r\n        // 如果有设置请求头\r\n        if (config.headers) {\r\n            config.headers(xhr)\r\n        }\r\n        if (config.change) {\r\n            config.change(xhr, formData)\r\n        }\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === 200) {\r\n                    //success\r\n                    let res = JSON.parse(xhr.responseText)\r\n                    self.imgURL = config.response(res)\r\n                    QuillWatch.active.uploadSuccess()\r\n                    self.insertImg()\r\n                    if (self.config.success) {\r\n                        self.config.success()\r\n                    }\r\n                } else {\r\n                    //error\r\n                    if (self.config.error) {\r\n                        self.config.error()\r\n                    }\r\n                    QuillWatch.active.uploadError()\r\n                }\r\n            }\r\n        }\r\n        // 开始上传数据\r\n        xhr.upload.onloadstart = function (e) {\r\n            QuillWatch.active.uploading()\r\n            // let length = (self.quill.getSelection() || {}).index || self.quill.getLength()\r\n            // self.quill.insertText(length, '[uploading...]', { 'color': 'red'}, true)\r\n            if (config.start) {\r\n                config.start()\r\n            }\r\n        }\r\n        // 上传过程\r\n        xhr.upload.onprogress = function (e) {\r\n            let complete = (e.loaded / e.total * 100 | 0) + '%'\r\n            QuillWatch.active.progress(complete)\r\n        }\r\n        // 当发生网络异常的时候会触发，如果上传数据的过程还未结束\r\n        xhr.upload.onerror = function (e) {\r\n            QuillWatch.active.uploadError()\r\n            if (config.error) {\r\n                config.error()\r\n            }\r\n        }\r\n        // 上传数据完成（成功或者失败）时会触发\r\n        xhr.upload.onloadend = function (e) {\r\n            if (config.end) {\r\n                config.end()\r\n            }\r\n        }\r\n        xhr.send(formData)\r\n    }\r\n\r\n    /**\r\n     * @description 往富文本编辑器插入图片\r\n     */\r\n    insertImg() {\r\n        const self = QuillWatch.active\r\n        self.quill.insertEmbed(QuillWatch.active.cursorIndex, 'image', self.imgURL)\r\n        self.quill.update()\r\n        self.quill.setSelection(self.cursorIndex+1);\r\n    }\r\n\r\n    /**\r\n     * @description 显示上传的进度\r\n     */\r\n    progress(pro) {\r\n        pro = '[' + 'uploading' + pro + ']'\r\n        QuillWatch.active.quill.root.innerHTML\r\n            = QuillWatch.active.quill.root.innerHTML.replace(/\\[uploading.*?\\]/, pro)\r\n    }\r\n\r\n    /**\r\n     * 开始上传\r\n     */\r\n    uploading() {\r\n        let length = (QuillWatch.active.quill.getSelection() || {}).index || QuillWatch.active.quill.getLength()\r\n        QuillWatch.active.cursorIndex = length\r\n        QuillWatch.active.quill.insertText(QuillWatch.active.cursorIndex, '[uploading...]', {'color': 'red'}, true)\r\n    }\r\n\r\n    /**\r\n     * 上传失败\r\n     */\r\n    uploadError() {\r\n        QuillWatch.active.quill.root.innerHTML\r\n            = QuillWatch.active.quill.root.innerHTML.replace(/\\[uploading.*?\\]/, '[upload error]')\r\n    }\r\n\r\n    uploadSuccess() {\r\n        QuillWatch.active.quill.root.innerHTML\r\n            = QuillWatch.active.quill.root.innerHTML.replace(/\\[uploading.*?\\]/, '')\r\n    }\r\n}\r\n\r\n/**\r\n * @description 点击图片上传\r\n */\r\nexport function imgHandler() {\r\n    let fileInput = document.querySelector('.quill-image-input');\r\n    if (fileInput === null) {\r\n        fileInput = document.createElement('input');\r\n        fileInput.setAttribute('type', 'file');\r\n        fileInput.classList.add('quill-image-input');\r\n        fileInput.style.display = 'none'\r\n        // 监听选择文件\r\n        fileInput.addEventListener('change', function () {\r\n            let self = QuillWatch.active\r\n            self.file = fileInput.files[0]\r\n            fileInput.value = ''\r\n            // 如果图片限制大小\r\n            if (self.config.size && self.file.size >= self.config.size * 1024 * 1024) {\r\n                if (self.config.sizeError) {\r\n                    self.config.sizeError()\r\n                }\r\n                return\r\n            }\r\n            if (self.config.action) {\r\n                self.uploadImg()\r\n            } else {\r\n                self.toBase64()\r\n            }\r\n        })\r\n        document.body.appendChild(fileInput);\r\n    }\r\n    fileInput.click();\r\n}\r\n\r\n/**\r\n *@description 全部工具栏\r\n */\r\nexport const container = [\r\n    ['bold', 'italic', 'underline', 'strike'],\r\n    ['blockquote', 'code-block'],\r\n    [{'header': 1}, {'header': 2}],\r\n    [{'list': 'ordered'}, {'list': 'bullet'}],\r\n    [{'script': 'sub'}, {'script': 'super'}],\r\n    [{'indent': '-1'}, {'indent': '+1'}],\r\n    [{'direction': 'rtl'}],\r\n    [{'size': ['small', false, 'large', 'huge']}],\r\n    [{'header': [1, 2, 3, 4, 5, 6, false]}],\r\n    [{'color': []}, {'background': []}],\r\n    [{'font': []}],\r\n    [{'align': []}],\r\n    ['clean'],\r\n    ['link', 'image', 'video']\r\n]\r\n\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}